"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/y-websocket";
exports.ids = ["vendor-chunks/y-websocket"];
exports.modules = {

/***/ "(ssr)/./node_modules/y-websocket/src/y-websocket.js":
/*!*****************************************************!*\
  !*** ./node_modules/y-websocket/src/y-websocket.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebsocketProvider: () => (/* binding */ WebsocketProvider),\n/* harmony export */   messageAuth: () => (/* binding */ messageAuth),\n/* harmony export */   messageAwareness: () => (/* binding */ messageAwareness),\n/* harmony export */   messageQueryAwareness: () => (/* binding */ messageQueryAwareness),\n/* harmony export */   messageSync: () => (/* binding */ messageSync)\n/* harmony export */ });\n/* harmony import */ var lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lib0/broadcastchannel */ \"(ssr)/./node_modules/lib0/broadcastchannel.js\");\n/* harmony import */ var lib0_time__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lib0/time */ \"(ssr)/./node_modules/lib0/time.js\");\n/* harmony import */ var lib0_encoding__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lib0/encoding */ \"(ssr)/./node_modules/lib0/encoding.js\");\n/* harmony import */ var lib0_decoding__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lib0/decoding */ \"(ssr)/./node_modules/lib0/decoding.js\");\n/* harmony import */ var y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! y-protocols/sync */ \"(ssr)/./node_modules/y-protocols/sync.js\");\n/* harmony import */ var y_protocols_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! y-protocols/auth */ \"(ssr)/./node_modules/y-protocols/auth.js\");\n/* harmony import */ var y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! y-protocols/awareness */ \"(ssr)/./node_modules/y-protocols/awareness.js\");\n/* harmony import */ var lib0_observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! lib0/observable */ \"(ssr)/./node_modules/lib0/observable.js\");\n/* harmony import */ var lib0_math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lib0/math */ \"(ssr)/./node_modules/lib0/math.js\");\n/* harmony import */ var lib0_url__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lib0/url */ \"(ssr)/./node_modules/lib0/url.js\");\n/* harmony import */ var lib0_environment__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lib0/environment */ \"(ssr)/./node_modules/lib0/environment.js\");\n/**\n * @module provider/websocket\n */ /* eslint-env browser */  // eslint-disable-line\n\n\n\n\n\n\n\n\n\n\n\nconst messageSync = 0;\nconst messageQueryAwareness = 3;\nconst messageAwareness = 1;\nconst messageAuth = 2;\n/**\n *                       encoder,          decoder,          provider,          emitSynced, messageType\n * @type {Array<function(encoding.Encoder, decoding.Decoder, WebsocketProvider, boolean,    number):void>}\n */ const messageHandlers = [];\nmessageHandlers[messageSync] = (encoder, decoder, provider, emitSynced, _messageType)=>{\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageSync);\n    const syncMessageType = y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.readSyncMessage(decoder, encoder, provider.doc, provider);\n    if (emitSynced && syncMessageType === y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.messageYjsSyncStep2 && !provider.synced) {\n        provider.synced = true;\n    }\n};\nmessageHandlers[messageQueryAwareness] = (encoder, _decoder, provider, _emitSynced, _messageType)=>{\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageAwareness);\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoder, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())));\n};\nmessageHandlers[messageAwareness] = (_encoder, decoder, provider, _emitSynced, _messageType)=>{\n    y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.applyAwarenessUpdate(provider.awareness, lib0_decoding__WEBPACK_IMPORTED_MODULE_4__.readVarUint8Array(decoder), provider);\n};\nmessageHandlers[messageAuth] = (_encoder, decoder, provider, _emitSynced, _messageType)=>{\n    y_protocols_auth__WEBPACK_IMPORTED_MODULE_1__.readAuthMessage(decoder, provider.doc, (_ydoc, reason)=>permissionDeniedHandler(provider, reason));\n};\n// @todo - this should depend on awareness.outdatedTime\nconst messageReconnectTimeout = 30000;\n/**\n * @param {WebsocketProvider} provider\n * @param {string} reason\n */ const permissionDeniedHandler = (provider, reason)=>console.warn(`Permission denied to access ${provider.url}.\\n${reason}`);\n/**\n * @param {WebsocketProvider} provider\n * @param {Uint8Array} buf\n * @param {boolean} emitSynced\n * @return {encoding.Encoder}\n */ const readMessage = (provider, buf, emitSynced)=>{\n    const decoder = lib0_decoding__WEBPACK_IMPORTED_MODULE_4__.createDecoder(buf);\n    const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n    const messageType = lib0_decoding__WEBPACK_IMPORTED_MODULE_4__.readVarUint(decoder);\n    const messageHandler = provider.messageHandlers[messageType];\n    if (/** @type {any} */ messageHandler) {\n        messageHandler(encoder, decoder, provider, emitSynced, messageType);\n    } else {\n        console.error(\"Unable to compute message\");\n    }\n    return encoder;\n};\n/**\n * @param {WebsocketProvider} provider\n */ const setupWS = (provider)=>{\n    if (provider.shouldConnect && provider.ws === null) {\n        const websocket = new provider._WS(provider.url);\n        websocket.binaryType = \"arraybuffer\";\n        provider.ws = websocket;\n        provider.wsconnecting = true;\n        provider.wsconnected = false;\n        provider.synced = false;\n        websocket.onmessage = (event)=>{\n            provider.wsLastMessageReceived = lib0_time__WEBPACK_IMPORTED_MODULE_5__.getUnixTime();\n            const encoder = readMessage(provider, new Uint8Array(event.data), true);\n            if (lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.length(encoder) > 1) {\n                websocket.send(lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder));\n            }\n        };\n        websocket.onerror = (event)=>{\n            provider.emit(\"connection-error\", [\n                event,\n                provider\n            ]);\n        };\n        websocket.onclose = (event)=>{\n            provider.emit(\"connection-close\", [\n                event,\n                provider\n            ]);\n            provider.ws = null;\n            provider.wsconnecting = false;\n            if (provider.wsconnected) {\n                provider.wsconnected = false;\n                provider.synced = false;\n                // update awareness (all users except local left)\n                y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.removeAwarenessStates(provider.awareness, Array.from(provider.awareness.getStates().keys()).filter((client)=>client !== provider.doc.clientID), provider);\n                provider.emit(\"status\", [\n                    {\n                        status: \"disconnected\"\n                    }\n                ]);\n            } else {\n                provider.wsUnsuccessfulReconnects++;\n            }\n            // Start with no reconnect timeout and increase timeout by\n            // using exponential backoff starting with 100ms\n            setTimeout(setupWS, lib0_math__WEBPACK_IMPORTED_MODULE_6__.min(lib0_math__WEBPACK_IMPORTED_MODULE_6__.pow(2, provider.wsUnsuccessfulReconnects) * 100, provider.maxBackoffTime), provider);\n        };\n        websocket.onopen = ()=>{\n            provider.wsLastMessageReceived = lib0_time__WEBPACK_IMPORTED_MODULE_5__.getUnixTime();\n            provider.wsconnecting = false;\n            provider.wsconnected = true;\n            provider.wsUnsuccessfulReconnects = 0;\n            provider.emit(\"status\", [\n                {\n                    status: \"connected\"\n                }\n            ]);\n            // always send sync step 1 when connected\n            const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n            lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageSync);\n            y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeSyncStep1(encoder, provider.doc);\n            websocket.send(lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder));\n            // broadcast local awareness state\n            if (provider.awareness.getLocalState() !== null) {\n                const encoderAwarenessState = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n                lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderAwarenessState, messageAwareness);\n                lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoderAwarenessState, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(provider.awareness, [\n                    provider.doc.clientID\n                ]));\n                websocket.send(lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderAwarenessState));\n            }\n        };\n        provider.emit(\"status\", [\n            {\n                status: \"connecting\"\n            }\n        ]);\n    }\n};\n/**\n * @param {WebsocketProvider} provider\n * @param {ArrayBuffer} buf\n */ const broadcastMessage = (provider, buf)=>{\n    const ws = provider.ws;\n    if (provider.wsconnected && ws && ws.readyState === ws.OPEN) {\n        ws.send(buf);\n    }\n    if (provider.bcconnected) {\n        lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(provider.bcChannel, buf, provider);\n    }\n};\n/**\n * Websocket Provider for Yjs. Creates a websocket connection to sync the shared document.\n * The document name is attached to the provided url. I.e. the following example\n * creates a websocket connection to http://localhost:1234/my-document-name\n *\n * @example\n *   import * as Y from 'yjs'\n *   import { WebsocketProvider } from 'y-websocket'\n *   const doc = new Y.Doc()\n *   const provider = new WebsocketProvider('http://localhost:1234', 'my-document-name', doc)\n *\n * @extends {Observable<string>}\n */ class WebsocketProvider extends lib0_observable__WEBPACK_IMPORTED_MODULE_8__.Observable {\n    /**\n   * @param {string} serverUrl\n   * @param {string} roomname\n   * @param {Y.Doc} doc\n   * @param {object} opts\n   * @param {boolean} [opts.connect]\n   * @param {awarenessProtocol.Awareness} [opts.awareness]\n   * @param {Object<string,string>} [opts.params]\n   * @param {typeof WebSocket} [opts.WebSocketPolyfill] Optionall provide a WebSocket polyfill\n   * @param {number} [opts.resyncInterval] Request server state every `resyncInterval` milliseconds\n   * @param {number} [opts.maxBackoffTime] Maximum amount of time to wait before trying to reconnect (we try to reconnect using exponential backoff)\n   * @param {boolean} [opts.disableBc] Disable cross-tab BroadcastChannel communication\n   */ constructor(serverUrl, roomname, doc, { connect = true, awareness = new y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.Awareness(doc), params = {}, WebSocketPolyfill = WebSocket, resyncInterval = -1, maxBackoffTime = 2500, disableBc = false } = {}){\n        super();\n        // ensure that url is always ends with /\n        while(serverUrl[serverUrl.length - 1] === \"/\"){\n            serverUrl = serverUrl.slice(0, serverUrl.length - 1);\n        }\n        const encodedParams = lib0_url__WEBPACK_IMPORTED_MODULE_9__.encodeQueryParams(params);\n        this.maxBackoffTime = maxBackoffTime;\n        this.bcChannel = serverUrl + \"/\" + roomname;\n        this.url = serverUrl + \"/\" + roomname + (encodedParams.length === 0 ? \"\" : \"?\" + encodedParams);\n        this.roomname = roomname;\n        this.doc = doc;\n        this._WS = WebSocketPolyfill;\n        this.awareness = awareness;\n        this.wsconnected = false;\n        this.wsconnecting = false;\n        this.bcconnected = false;\n        this.disableBc = disableBc;\n        this.wsUnsuccessfulReconnects = 0;\n        this.messageHandlers = messageHandlers.slice();\n        /**\n     * @type {boolean}\n     */ this._synced = false;\n        /**\n     * @type {WebSocket?}\n     */ this.ws = null;\n        this.wsLastMessageReceived = 0;\n        /**\n     * Whether to connect to other peers or not\n     * @type {boolean}\n     */ this.shouldConnect = connect;\n        /**\n     * @type {number}\n     */ this._resyncInterval = 0;\n        if (resyncInterval > 0) {\n            this._resyncInterval = /** @type {any} */ setInterval(()=>{\n                if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n                    // resend sync step 1\n                    const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n                    lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageSync);\n                    y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeSyncStep1(encoder, doc);\n                    this.ws.send(lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder));\n                }\n            }, resyncInterval);\n        }\n        /**\n     * @param {ArrayBuffer} data\n     * @param {any} origin\n     */ this._bcSubscriber = (data, origin)=>{\n            if (origin !== this) {\n                const encoder = readMessage(this, new Uint8Array(data), false);\n                if (lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.length(encoder) > 1) {\n                    lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder), this);\n                }\n            }\n        };\n        /**\n     * Listens to Yjs updates and sends them to remote peers (ws and broadcastchannel)\n     * @param {Uint8Array} update\n     * @param {any} origin\n     */ this._updateHandler = (update, origin)=>{\n            if (origin !== this) {\n                const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n                lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageSync);\n                y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeUpdate(encoder, update);\n                broadcastMessage(this, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder));\n            }\n        };\n        this.doc.on(\"update\", this._updateHandler);\n        /**\n     * @param {any} changed\n     * @param {any} _origin\n     */ this._awarenessUpdateHandler = ({ added, updated, removed }, _origin)=>{\n            const changedClients = added.concat(updated).concat(removed);\n            const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n            lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageAwareness);\n            lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoder, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(awareness, changedClients));\n            broadcastMessage(this, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder));\n        };\n        this._exitHandler = ()=>{\n            y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.removeAwarenessStates(this.awareness, [\n                doc.clientID\n            ], \"app closed\");\n        };\n        if (lib0_environment__WEBPACK_IMPORTED_MODULE_10__.isNode && typeof process !== \"undefined\") {\n            process.on(\"exit\", this._exitHandler);\n        }\n        awareness.on(\"update\", this._awarenessUpdateHandler);\n        this._checkInterval = /** @type {any} */ setInterval(()=>{\n            if (this.wsconnected && messageReconnectTimeout < lib0_time__WEBPACK_IMPORTED_MODULE_5__.getUnixTime() - this.wsLastMessageReceived) {\n                // no message received in a long time - not even your own awareness\n                // updates (which are updated every 15 seconds)\n                /** @type {WebSocket} */ this.ws.close();\n            }\n        }, messageReconnectTimeout / 10);\n        if (connect) {\n            this.connect();\n        }\n    }\n    /**\n   * @type {boolean}\n   */ get synced() {\n        return this._synced;\n    }\n    set synced(state) {\n        if (this._synced !== state) {\n            this._synced = state;\n            this.emit(\"synced\", [\n                state\n            ]);\n            this.emit(\"sync\", [\n                state\n            ]);\n        }\n    }\n    destroy() {\n        if (this._resyncInterval !== 0) {\n            clearInterval(this._resyncInterval);\n        }\n        clearInterval(this._checkInterval);\n        this.disconnect();\n        if (lib0_environment__WEBPACK_IMPORTED_MODULE_10__.isNode && typeof process !== \"undefined\") {\n            process.off(\"exit\", this._exitHandler);\n        }\n        this.awareness.off(\"update\", this._awarenessUpdateHandler);\n        this.doc.off(\"update\", this._updateHandler);\n        super.destroy();\n    }\n    connectBc() {\n        if (this.disableBc) {\n            return;\n        }\n        if (!this.bcconnected) {\n            lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.subscribe(this.bcChannel, this._bcSubscriber);\n            this.bcconnected = true;\n        }\n        // send sync step1 to bc\n        // write sync step 1\n        const encoderSync = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderSync, messageSync);\n        y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeSyncStep1(encoderSync, this.doc);\n        lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderSync), this);\n        // broadcast local state\n        const encoderState = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderState, messageSync);\n        y_protocols_sync__WEBPACK_IMPORTED_MODULE_0__.writeSyncStep2(encoderState, this.doc);\n        lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderState), this);\n        // write queryAwareness\n        const encoderAwarenessQuery = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderAwarenessQuery, messageQueryAwareness);\n        lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderAwarenessQuery), this);\n        // broadcast local awareness state\n        const encoderAwarenessState = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoderAwarenessState, messageAwareness);\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoderAwarenessState, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(this.awareness, [\n            this.doc.clientID\n        ]));\n        lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.publish(this.bcChannel, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoderAwarenessState), this);\n    }\n    disconnectBc() {\n        // broadcast message with local awareness state set to null (indicating disconnect)\n        const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.createEncoder();\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint(encoder, messageAwareness);\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.writeVarUint8Array(encoder, y_protocols_awareness__WEBPACK_IMPORTED_MODULE_2__.encodeAwarenessUpdate(this.awareness, [\n            this.doc.clientID\n        ], new Map()));\n        broadcastMessage(this, lib0_encoding__WEBPACK_IMPORTED_MODULE_3__.toUint8Array(encoder));\n        if (this.bcconnected) {\n            lib0_broadcastchannel__WEBPACK_IMPORTED_MODULE_7__.unsubscribe(this.bcChannel, this._bcSubscriber);\n            this.bcconnected = false;\n        }\n    }\n    disconnect() {\n        this.shouldConnect = false;\n        this.disconnectBc();\n        if (this.ws !== null) {\n            this.ws.close();\n        }\n    }\n    connect() {\n        this.shouldConnect = true;\n        if (!this.wsconnected && this.ws === null) {\n            setupWS(this);\n            this.connectBc();\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-websocket/src/y-websocket.js\n");

/***/ })

};
;