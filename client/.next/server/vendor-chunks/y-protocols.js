"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/y-protocols";
exports.ids = ["vendor-chunks/y-protocols"];
exports.modules = {

/***/ "(ssr)/./node_modules/y-protocols/auth.js":
/*!******************************************!*\
  !*** ./node_modules/y-protocols/auth.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   messagePermissionDenied: () => (/* binding */ messagePermissionDenied),\n/* harmony export */   readAuthMessage: () => (/* binding */ readAuthMessage),\n/* harmony export */   writePermissionDenied: () => (/* binding */ writePermissionDenied)\n/* harmony export */ });\n/* harmony import */ var lib0_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib0/encoding */ \"(ssr)/./node_modules/lib0/encoding.js\");\n/* harmony import */ var lib0_decoding__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/decoding */ \"(ssr)/./node_modules/lib0/decoding.js\");\n // eslint-disable-line\n\n\nconst messagePermissionDenied = 0;\n/**\n * @param {encoding.Encoder} encoder\n * @param {string} reason\n */ const writePermissionDenied = (encoder, reason)=>{\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarUint(encoder, messagePermissionDenied);\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarString(encoder, reason);\n};\n/**\n * @callback PermissionDeniedHandler\n * @param {any} y\n * @param {string} reason\n */ /**\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} y\n * @param {PermissionDeniedHandler} permissionDeniedHandler\n */ const readAuthMessage = (decoder, y, permissionDeniedHandler)=>{\n    switch(lib0_decoding__WEBPACK_IMPORTED_MODULE_1__.readVarUint(decoder)){\n        case messagePermissionDenied:\n            permissionDeniedHandler(y, lib0_decoding__WEBPACK_IMPORTED_MODULE_1__.readVarString(decoder));\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMveS1wcm90b2NvbHMvYXV0aC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUN3QixDQUFDLHNCQUFzQjtBQUNOO0FBQ0E7QUFFbEMsTUFBTUcsMEJBQTBCLEVBQUM7QUFFeEM7OztDQUdDLEdBQ00sTUFBTUMsd0JBQXdCLENBQUNDLFNBQVNDO0lBQzdDTCx1REFBcUIsQ0FBQ0ksU0FBU0Y7SUFDL0JGLHlEQUF1QixDQUFDSSxTQUFTQztBQUNuQyxFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUVEOzs7OztDQUtDLEdBQ00sTUFBTUcsa0JBQWtCLENBQUNDLFNBQVNDLEdBQUdDO0lBQzFDLE9BQVFWLHNEQUFvQixDQUFDUTtRQUMzQixLQUFLUDtZQUF5QlMsd0JBQXdCRCxHQUFHVCx3REFBc0IsQ0FBQ1E7SUFDbEY7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3luY2RyYXctY2xpZW50Ly4vbm9kZV9tb2R1bGVzL3ktcHJvdG9jb2xzL2F1dGguanM/YjAyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCAqIGFzIFkgZnJvbSAneWpzJyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5pbXBvcnQgKiBhcyBlbmNvZGluZyBmcm9tICdsaWIwL2VuY29kaW5nJ1xuaW1wb3J0ICogYXMgZGVjb2RpbmcgZnJvbSAnbGliMC9kZWNvZGluZydcblxuZXhwb3J0IGNvbnN0IG1lc3NhZ2VQZXJtaXNzaW9uRGVuaWVkID0gMFxuXG4vKipcbiAqIEBwYXJhbSB7ZW5jb2RpbmcuRW5jb2Rlcn0gZW5jb2RlclxuICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvblxuICovXG5leHBvcnQgY29uc3Qgd3JpdGVQZXJtaXNzaW9uRGVuaWVkID0gKGVuY29kZXIsIHJlYXNvbikgPT4ge1xuICBlbmNvZGluZy53cml0ZVZhclVpbnQoZW5jb2RlciwgbWVzc2FnZVBlcm1pc3Npb25EZW5pZWQpXG4gIGVuY29kaW5nLndyaXRlVmFyU3RyaW5nKGVuY29kZXIsIHJlYXNvbilcbn1cblxuLyoqXG4gKiBAY2FsbGJhY2sgUGVybWlzc2lvbkRlbmllZEhhbmRsZXJcbiAqIEBwYXJhbSB7YW55fSB5XG4gKiBAcGFyYW0ge3N0cmluZ30gcmVhc29uXG4gKi9cblxuLyoqXG4gKlxuICogQHBhcmFtIHtkZWNvZGluZy5EZWNvZGVyfSBkZWNvZGVyXG4gKiBAcGFyYW0ge1kuRG9jfSB5XG4gKiBAcGFyYW0ge1Blcm1pc3Npb25EZW5pZWRIYW5kbGVyfSBwZXJtaXNzaW9uRGVuaWVkSGFuZGxlclxuICovXG5leHBvcnQgY29uc3QgcmVhZEF1dGhNZXNzYWdlID0gKGRlY29kZXIsIHksIHBlcm1pc3Npb25EZW5pZWRIYW5kbGVyKSA9PiB7XG4gIHN3aXRjaCAoZGVjb2RpbmcucmVhZFZhclVpbnQoZGVjb2RlcikpIHtcbiAgICBjYXNlIG1lc3NhZ2VQZXJtaXNzaW9uRGVuaWVkOiBwZXJtaXNzaW9uRGVuaWVkSGFuZGxlcih5LCBkZWNvZGluZy5yZWFkVmFyU3RyaW5nKGRlY29kZXIpKVxuICB9XG59XG4iXSwibmFtZXMiOlsiWSIsImVuY29kaW5nIiwiZGVjb2RpbmciLCJtZXNzYWdlUGVybWlzc2lvbkRlbmllZCIsIndyaXRlUGVybWlzc2lvbkRlbmllZCIsImVuY29kZXIiLCJyZWFzb24iLCJ3cml0ZVZhclVpbnQiLCJ3cml0ZVZhclN0cmluZyIsInJlYWRBdXRoTWVzc2FnZSIsImRlY29kZXIiLCJ5IiwicGVybWlzc2lvbkRlbmllZEhhbmRsZXIiLCJyZWFkVmFyVWludCIsInJlYWRWYXJTdHJpbmciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-protocols/auth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/y-protocols/awareness.js":
/*!***********************************************!*\
  !*** ./node_modules/y-protocols/awareness.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Awareness: () => (/* binding */ Awareness),\n/* harmony export */   applyAwarenessUpdate: () => (/* binding */ applyAwarenessUpdate),\n/* harmony export */   encodeAwarenessUpdate: () => (/* binding */ encodeAwarenessUpdate),\n/* harmony export */   modifyAwarenessUpdate: () => (/* binding */ modifyAwarenessUpdate),\n/* harmony export */   outdatedTimeout: () => (/* binding */ outdatedTimeout),\n/* harmony export */   removeAwarenessStates: () => (/* binding */ removeAwarenessStates)\n/* harmony export */ });\n/* harmony import */ var lib0_encoding__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lib0/encoding */ \"(ssr)/./node_modules/lib0/encoding.js\");\n/* harmony import */ var lib0_decoding__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lib0/decoding */ \"(ssr)/./node_modules/lib0/decoding.js\");\n/* harmony import */ var lib0_time__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lib0/time */ \"(ssr)/./node_modules/lib0/time.js\");\n/* harmony import */ var lib0_math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lib0/math */ \"(ssr)/./node_modules/lib0/math.js\");\n/* harmony import */ var lib0_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib0/observable */ \"(ssr)/./node_modules/lib0/observable.js\");\n/* harmony import */ var lib0_function__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lib0/function */ \"(ssr)/./node_modules/lib0/function.js\");\n/**\n * @module awareness-protocol\n */ \n\n\n\n\n\n // eslint-disable-line\nconst outdatedTimeout = 30000;\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */ /**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */ class Awareness extends lib0_observable__WEBPACK_IMPORTED_MODULE_0__.Observable {\n    /**\n   * @param {Y.Doc} doc\n   */ constructor(doc){\n        super();\n        this.doc = doc;\n        /**\n     * @type {number}\n     */ this.clientID = doc.clientID;\n        /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */ this.states = new Map();\n        /**\n     * @type {Map<number, MetaClientState>}\n     */ this.meta = new Map();\n        this._checkInterval = /** @type {any} */ setInterval(()=>{\n            const now = lib0_time__WEBPACK_IMPORTED_MODULE_1__.getUnixTime();\n            if (this.getLocalState() !== null && outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ this.meta.get(this.clientID).lastUpdated) {\n                // renew local clock\n                this.setLocalState(this.getLocalState());\n            }\n            /**\n       * @type {Array<number>}\n       */ const remove = [];\n            this.meta.forEach((meta, clientid)=>{\n                if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n                    remove.push(clientid);\n                }\n            });\n            if (remove.length > 0) {\n                removeAwarenessStates(this, remove, \"timeout\");\n            }\n        }, lib0_math__WEBPACK_IMPORTED_MODULE_2__.floor(outdatedTimeout / 10));\n        doc.on(\"destroy\", ()=>{\n            this.destroy();\n        });\n        this.setLocalState({});\n    }\n    destroy() {\n        this.emit(\"destroy\", [\n            this\n        ]);\n        this.setLocalState(null);\n        super.destroy();\n        clearInterval(this._checkInterval);\n    }\n    /**\n   * @return {Object<string,any>|null}\n   */ getLocalState() {\n        return this.states.get(this.clientID) || null;\n    }\n    /**\n   * @param {Object<string,any>|null} state\n   */ setLocalState(state) {\n        const clientID = this.clientID;\n        const currLocalMeta = this.meta.get(clientID);\n        const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1;\n        const prevState = this.states.get(clientID);\n        if (state === null) {\n            this.states.delete(clientID);\n        } else {\n            this.states.set(clientID, state);\n        }\n        this.meta.set(clientID, {\n            clock,\n            lastUpdated: lib0_time__WEBPACK_IMPORTED_MODULE_1__.getUnixTime()\n        });\n        const added = [];\n        const updated = [];\n        const filteredUpdated = [];\n        const removed = [];\n        if (state === null) {\n            removed.push(clientID);\n        } else if (prevState == null) {\n            if (state != null) {\n                added.push(clientID);\n            }\n        } else {\n            updated.push(clientID);\n            if (!lib0_function__WEBPACK_IMPORTED_MODULE_3__.equalityDeep(prevState, state)) {\n                filteredUpdated.push(clientID);\n            }\n        }\n        if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n            this.emit(\"change\", [\n                {\n                    added,\n                    updated: filteredUpdated,\n                    removed\n                },\n                \"local\"\n            ]);\n        }\n        this.emit(\"update\", [\n            {\n                added,\n                updated,\n                removed\n            },\n            \"local\"\n        ]);\n    }\n    /**\n   * @param {string} field\n   * @param {any} value\n   */ setLocalStateField(field, value) {\n        const state = this.getLocalState();\n        if (state !== null) {\n            this.setLocalState({\n                ...state,\n                [field]: value\n            });\n        }\n    }\n    /**\n   * @return {Map<number,Object<string,any>>}\n   */ getStates() {\n        return this.states;\n    }\n}\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */ const removeAwarenessStates = (awareness, clients, origin)=>{\n    const removed = [];\n    for(let i = 0; i < clients.length; i++){\n        const clientID = clients[i];\n        if (awareness.states.has(clientID)) {\n            awareness.states.delete(clientID);\n            if (clientID === awareness.clientID) {\n                const curMeta = /** @type {MetaClientState} */ awareness.meta.get(clientID);\n                awareness.meta.set(clientID, {\n                    clock: curMeta.clock + 1,\n                    lastUpdated: lib0_time__WEBPACK_IMPORTED_MODULE_1__.getUnixTime()\n                });\n            }\n            removed.push(clientID);\n        }\n    }\n    if (removed.length > 0) {\n        awareness.emit(\"change\", [\n            {\n                added: [],\n                updated: [],\n                removed\n            },\n            origin\n        ]);\n        awareness.emit(\"update\", [\n            {\n                added: [],\n                updated: [],\n                removed\n            },\n            origin\n        ]);\n    }\n};\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */ const encodeAwarenessUpdate = (awareness, clients, states = awareness.states)=>{\n    const len = clients.length;\n    const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.createEncoder();\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.writeVarUint(encoder, len);\n    for(let i = 0; i < len; i++){\n        const clientID = clients[i];\n        const state = states.get(clientID) || null;\n        const clock = /** @type {MetaClientState} */ awareness.meta.get(clientID).clock;\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.writeVarUint(encoder, clientID);\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.writeVarUint(encoder, clock);\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.writeVarString(encoder, JSON.stringify(state));\n    }\n    return lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.toUint8Array(encoder);\n};\n/**\n * Modify the content of an awareness update before re-encoding it to an awareness update.\n *\n * This might be useful when you have a central server that wants to ensure that clients\n * cant hijack somebody elses identity.\n *\n * @param {Uint8Array} update\n * @param {function(any):any} modify\n * @return {Uint8Array}\n */ const modifyAwarenessUpdate = (update, modify)=>{\n    const decoder = lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.createDecoder(update);\n    const encoder = lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.createEncoder();\n    const len = lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.readVarUint(decoder);\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.writeVarUint(encoder, len);\n    for(let i = 0; i < len; i++){\n        const clientID = lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.readVarUint(decoder);\n        const clock = lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.readVarUint(decoder);\n        const state = JSON.parse(lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.readVarString(decoder));\n        const modifiedState = modify(state);\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.writeVarUint(encoder, clientID);\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.writeVarUint(encoder, clock);\n        lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.writeVarString(encoder, JSON.stringify(modifiedState));\n    }\n    return lib0_encoding__WEBPACK_IMPORTED_MODULE_4__.toUint8Array(encoder);\n};\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */ const applyAwarenessUpdate = (awareness, update, origin)=>{\n    const decoder = lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.createDecoder(update);\n    const timestamp = lib0_time__WEBPACK_IMPORTED_MODULE_1__.getUnixTime();\n    const added = [];\n    const updated = [];\n    const filteredUpdated = [];\n    const removed = [];\n    const len = lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.readVarUint(decoder);\n    for(let i = 0; i < len; i++){\n        const clientID = lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.readVarUint(decoder);\n        let clock = lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.readVarUint(decoder);\n        const state = JSON.parse(lib0_decoding__WEBPACK_IMPORTED_MODULE_5__.readVarString(decoder));\n        const clientMeta = awareness.meta.get(clientID);\n        const prevState = awareness.states.get(clientID);\n        const currClock = clientMeta === undefined ? 0 : clientMeta.clock;\n        if (currClock < clock || currClock === clock && state === null && awareness.states.has(clientID)) {\n            if (state === null) {\n                // never let a remote client remove this local state\n                if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n                    // remote client removed the local state. Do not remote state. Broadcast a message indicating\n                    // that this client still exists by increasing the clock\n                    clock++;\n                } else {\n                    awareness.states.delete(clientID);\n                }\n            } else {\n                awareness.states.set(clientID, state);\n            }\n            awareness.meta.set(clientID, {\n                clock,\n                lastUpdated: timestamp\n            });\n            if (clientMeta === undefined && state !== null) {\n                added.push(clientID);\n            } else if (clientMeta !== undefined && state === null) {\n                removed.push(clientID);\n            } else if (state !== null) {\n                if (!lib0_function__WEBPACK_IMPORTED_MODULE_3__.equalityDeep(state, prevState)) {\n                    filteredUpdated.push(clientID);\n                }\n                updated.push(clientID);\n            }\n        }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n        awareness.emit(\"change\", [\n            {\n                added,\n                updated: filteredUpdated,\n                removed\n            },\n            origin\n        ]);\n    }\n    if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n        awareness.emit(\"update\", [\n            {\n                added,\n                updated,\n                removed\n            },\n            origin\n        ]);\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-protocols/awareness.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/y-protocols/sync.js":
/*!******************************************!*\
  !*** ./node_modules/y-protocols/sync.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   messageYjsSyncStep1: () => (/* binding */ messageYjsSyncStep1),\n/* harmony export */   messageYjsSyncStep2: () => (/* binding */ messageYjsSyncStep2),\n/* harmony export */   messageYjsUpdate: () => (/* binding */ messageYjsUpdate),\n/* harmony export */   readSyncMessage: () => (/* binding */ readSyncMessage),\n/* harmony export */   readSyncStep1: () => (/* binding */ readSyncStep1),\n/* harmony export */   readSyncStep2: () => (/* binding */ readSyncStep2),\n/* harmony export */   readUpdate: () => (/* binding */ readUpdate),\n/* harmony export */   writeSyncStep1: () => (/* binding */ writeSyncStep1),\n/* harmony export */   writeSyncStep2: () => (/* binding */ writeSyncStep2),\n/* harmony export */   writeUpdate: () => (/* binding */ writeUpdate)\n/* harmony export */ });\n/* harmony import */ var lib0_encoding__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lib0/encoding */ \"(ssr)/./node_modules/lib0/encoding.js\");\n/* harmony import */ var lib0_decoding__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lib0/decoding */ \"(ssr)/./node_modules/lib0/decoding.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! yjs */ \"(ssr)/./node_modules/yjs/dist/yjs.mjs\");\n/**\n * @module sync-protocol\n */ \n\n\n/**\n * @typedef {Map<number, number>} StateMap\n */ /**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server should only reply to requests, and not initiate them.\n * Therefore it is necessary that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */ const messageYjsSyncStep1 = 0;\nconst messageYjsSyncStep2 = 1;\nconst messageYjsUpdate = 2;\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */ const writeSyncStep1 = (encoder, doc)=>{\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarUint(encoder, messageYjsSyncStep1);\n    const sv = yjs__WEBPACK_IMPORTED_MODULE_1__.encodeStateVector(doc);\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarUint8Array(encoder, sv);\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */ const writeSyncStep2 = (encoder, doc, encodedStateVector)=>{\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarUint(encoder, messageYjsSyncStep2);\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarUint8Array(encoder, yjs__WEBPACK_IMPORTED_MODULE_1__.encodeStateAsUpdate(doc, encodedStateVector));\n};\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */ const readSyncStep1 = (decoder, encoder, doc)=>writeSyncStep2(encoder, doc, lib0_decoding__WEBPACK_IMPORTED_MODULE_2__.readVarUint8Array(decoder));\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */ const readSyncStep2 = (decoder, doc, transactionOrigin)=>{\n    try {\n        yjs__WEBPACK_IMPORTED_MODULE_1__.applyUpdate(doc, lib0_decoding__WEBPACK_IMPORTED_MODULE_2__.readVarUint8Array(decoder), transactionOrigin);\n    } catch (error) {\n        // This catches errors that are thrown by event handlers\n        console.error(\"Caught error while handling a Yjs update\", error);\n    }\n};\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */ const writeUpdate = (encoder, update)=>{\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarUint(encoder, messageYjsUpdate);\n    lib0_encoding__WEBPACK_IMPORTED_MODULE_0__.writeVarUint8Array(encoder, update);\n};\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */ const readUpdate = readSyncStep2;\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Does not need to be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */ const readSyncMessage = (decoder, encoder, doc, transactionOrigin)=>{\n    const messageType = lib0_decoding__WEBPACK_IMPORTED_MODULE_2__.readVarUint(decoder);\n    switch(messageType){\n        case messageYjsSyncStep1:\n            readSyncStep1(decoder, encoder, doc);\n            break;\n        case messageYjsSyncStep2:\n            readSyncStep2(decoder, doc, transactionOrigin);\n            break;\n        case messageYjsUpdate:\n            readUpdate(decoder, doc, transactionOrigin);\n            break;\n        default:\n            throw new Error(\"Unknown message type\");\n    }\n    return messageType;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/y-protocols/sync.js\n");

/***/ })

};
;